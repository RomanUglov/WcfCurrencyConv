//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFClientApplication.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="www.Sometest.com", ConfigurationName="ServiceReference.ICurrencyConv")]
    public interface ICurrencyConv {
        
        [System.ServiceModel.OperationContractAttribute(Action="www.Sometest.com/ICurrencyConv/GetRateByDate", ReplyAction="www.Sometest.com/ICurrencyConv/GetRateByDateResponse")]
        string[] GetRateByDate(System.DateTime dateFrom, System.DateTime dateTo, string currencyCode);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="www.Sometest.com/ICurrencyConv/GetRateByDate", ReplyAction="www.Sometest.com/ICurrencyConv/GetRateByDateResponse")]
        System.IAsyncResult BeginGetRateByDate(System.DateTime dateFrom, System.DateTime dateTo, string currencyCode, System.AsyncCallback callback, object asyncState);
        
        string[] EndGetRateByDate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="www.Sometest.com/ICurrencyConv/Convert", ReplyAction="www.Sometest.com/ICurrencyConv/ConvertResponse")]
        double Convert(string currA, string currB, System.DateTime date, double value);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="www.Sometest.com/ICurrencyConv/Convert", ReplyAction="www.Sometest.com/ICurrencyConv/ConvertResponse")]
        System.IAsyncResult BeginConvert(string currA, string currB, System.DateTime date, double value, System.AsyncCallback callback, object asyncState);
        
        double EndConvert(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="www.Sometest.com/ICurrencyConv/ExportToCSV", ReplyAction="www.Sometest.com/ICurrencyConv/ExportToCSVResponse")]
        string ExportToCSV(System.DateTime dateFrom, System.DateTime dateTo, string currencyCode);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="www.Sometest.com/ICurrencyConv/ExportToCSV", ReplyAction="www.Sometest.com/ICurrencyConv/ExportToCSVResponse")]
        System.IAsyncResult BeginExportToCSV(System.DateTime dateFrom, System.DateTime dateTo, string currencyCode, System.AsyncCallback callback, object asyncState);
        
        string EndExportToCSV(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICurrencyConvChannel : WCFClientApplication.ServiceReference.ICurrencyConv, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRateByDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRateByDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConvertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ConvertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public double Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExportToCSVCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ExportToCSVCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CurrencyConvClient : System.ServiceModel.ClientBase<WCFClientApplication.ServiceReference.ICurrencyConv>, WCFClientApplication.ServiceReference.ICurrencyConv {
        
        private BeginOperationDelegate onBeginGetRateByDateDelegate;
        
        private EndOperationDelegate onEndGetRateByDateDelegate;
        
        private System.Threading.SendOrPostCallback onGetRateByDateCompletedDelegate;
        
        private BeginOperationDelegate onBeginConvertDelegate;
        
        private EndOperationDelegate onEndConvertDelegate;
        
        private System.Threading.SendOrPostCallback onConvertCompletedDelegate;
        
        private BeginOperationDelegate onBeginExportToCSVDelegate;
        
        private EndOperationDelegate onEndExportToCSVDelegate;
        
        private System.Threading.SendOrPostCallback onExportToCSVCompletedDelegate;
        
        public CurrencyConvClient() {
        }
        
        public CurrencyConvClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CurrencyConvClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CurrencyConvClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CurrencyConvClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetRateByDateCompletedEventArgs> GetRateByDateCompleted;
        
        public event System.EventHandler<ConvertCompletedEventArgs> ConvertCompleted;
        
        public event System.EventHandler<ExportToCSVCompletedEventArgs> ExportToCSVCompleted;
        
        public string[] GetRateByDate(System.DateTime dateFrom, System.DateTime dateTo, string currencyCode) {
            return base.Channel.GetRateByDate(dateFrom, dateTo, currencyCode);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetRateByDate(System.DateTime dateFrom, System.DateTime dateTo, string currencyCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRateByDate(dateFrom, dateTo, currencyCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndGetRateByDate(System.IAsyncResult result) {
            return base.Channel.EndGetRateByDate(result);
        }
        
        private System.IAsyncResult OnBeginGetRateByDate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.DateTime dateFrom = ((System.DateTime)(inValues[0]));
            System.DateTime dateTo = ((System.DateTime)(inValues[1]));
            string currencyCode = ((string)(inValues[2]));
            return this.BeginGetRateByDate(dateFrom, dateTo, currencyCode, callback, asyncState);
        }
        
        private object[] OnEndGetRateByDate(System.IAsyncResult result) {
            string[] retVal = this.EndGetRateByDate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRateByDateCompleted(object state) {
            if ((this.GetRateByDateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRateByDateCompleted(this, new GetRateByDateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRateByDateAsync(System.DateTime dateFrom, System.DateTime dateTo, string currencyCode) {
            this.GetRateByDateAsync(dateFrom, dateTo, currencyCode, null);
        }
        
        public void GetRateByDateAsync(System.DateTime dateFrom, System.DateTime dateTo, string currencyCode, object userState) {
            if ((this.onBeginGetRateByDateDelegate == null)) {
                this.onBeginGetRateByDateDelegate = new BeginOperationDelegate(this.OnBeginGetRateByDate);
            }
            if ((this.onEndGetRateByDateDelegate == null)) {
                this.onEndGetRateByDateDelegate = new EndOperationDelegate(this.OnEndGetRateByDate);
            }
            if ((this.onGetRateByDateCompletedDelegate == null)) {
                this.onGetRateByDateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRateByDateCompleted);
            }
            base.InvokeAsync(this.onBeginGetRateByDateDelegate, new object[] {
                        dateFrom,
                        dateTo,
                        currencyCode}, this.onEndGetRateByDateDelegate, this.onGetRateByDateCompletedDelegate, userState);
        }
        
        public double Convert(string currA, string currB, System.DateTime date, double value) {
            return base.Channel.Convert(currA, currB, date, value);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginConvert(string currA, string currB, System.DateTime date, double value, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginConvert(currA, currB, date, value, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public double EndConvert(System.IAsyncResult result) {
            return base.Channel.EndConvert(result);
        }
        
        private System.IAsyncResult OnBeginConvert(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string currA = ((string)(inValues[0]));
            string currB = ((string)(inValues[1]));
            System.DateTime date = ((System.DateTime)(inValues[2]));
            double value = ((double)(inValues[3]));
            return this.BeginConvert(currA, currB, date, value, callback, asyncState);
        }
        
        private object[] OnEndConvert(System.IAsyncResult result) {
            double retVal = this.EndConvert(result);
            return new object[] {
                    retVal};
        }
        
        private void OnConvertCompleted(object state) {
            if ((this.ConvertCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ConvertCompleted(this, new ConvertCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ConvertAsync(string currA, string currB, System.DateTime date, double value) {
            this.ConvertAsync(currA, currB, date, value, null);
        }
        
        public void ConvertAsync(string currA, string currB, System.DateTime date, double value, object userState) {
            if ((this.onBeginConvertDelegate == null)) {
                this.onBeginConvertDelegate = new BeginOperationDelegate(this.OnBeginConvert);
            }
            if ((this.onEndConvertDelegate == null)) {
                this.onEndConvertDelegate = new EndOperationDelegate(this.OnEndConvert);
            }
            if ((this.onConvertCompletedDelegate == null)) {
                this.onConvertCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnConvertCompleted);
            }
            base.InvokeAsync(this.onBeginConvertDelegate, new object[] {
                        currA,
                        currB,
                        date,
                        value}, this.onEndConvertDelegate, this.onConvertCompletedDelegate, userState);
        }
        
        public string ExportToCSV(System.DateTime dateFrom, System.DateTime dateTo, string currencyCode) {
            return base.Channel.ExportToCSV(dateFrom, dateTo, currencyCode);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginExportToCSV(System.DateTime dateFrom, System.DateTime dateTo, string currencyCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExportToCSV(dateFrom, dateTo, currencyCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndExportToCSV(System.IAsyncResult result) {
            return base.Channel.EndExportToCSV(result);
        }
        
        private System.IAsyncResult OnBeginExportToCSV(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.DateTime dateFrom = ((System.DateTime)(inValues[0]));
            System.DateTime dateTo = ((System.DateTime)(inValues[1]));
            string currencyCode = ((string)(inValues[2]));
            return this.BeginExportToCSV(dateFrom, dateTo, currencyCode, callback, asyncState);
        }
        
        private object[] OnEndExportToCSV(System.IAsyncResult result) {
            string retVal = this.EndExportToCSV(result);
            return new object[] {
                    retVal};
        }
        
        private void OnExportToCSVCompleted(object state) {
            if ((this.ExportToCSVCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExportToCSVCompleted(this, new ExportToCSVCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExportToCSVAsync(System.DateTime dateFrom, System.DateTime dateTo, string currencyCode) {
            this.ExportToCSVAsync(dateFrom, dateTo, currencyCode, null);
        }
        
        public void ExportToCSVAsync(System.DateTime dateFrom, System.DateTime dateTo, string currencyCode, object userState) {
            if ((this.onBeginExportToCSVDelegate == null)) {
                this.onBeginExportToCSVDelegate = new BeginOperationDelegate(this.OnBeginExportToCSV);
            }
            if ((this.onEndExportToCSVDelegate == null)) {
                this.onEndExportToCSVDelegate = new EndOperationDelegate(this.OnEndExportToCSV);
            }
            if ((this.onExportToCSVCompletedDelegate == null)) {
                this.onExportToCSVCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExportToCSVCompleted);
            }
            base.InvokeAsync(this.onBeginExportToCSVDelegate, new object[] {
                        dateFrom,
                        dateTo,
                        currencyCode}, this.onEndExportToCSVDelegate, this.onExportToCSVCompletedDelegate, userState);
        }
    }
}
